# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_data.ipynb.

# %% auto 0
__all__ = ['reformat_metadata', 'read_sav', 'sav_to_parquet', 'Dataset']

# %% ../nbs/01_data.ipynb 3
from fastcore.utils import *
import pandas as pd
from pandas import DataFrame
import numpy as np
import pyreadstat
from pathlib import Path
from typing import List, Tuple

# %% ../nbs/01_data.ipynb 5
def reformat_metadata(meta: pyreadstat.metadata_container
                      ) -> DataFrame:
      "Convert metadata from pyreadstat format into a pandas DataFrame."
      # Not including 'align' or 'role', as pyreadstat does not include them
      meta={"Label": meta.column_names_to_labels,
            "Values": meta.variable_value_labels,
            "Type": meta.original_variable_types,
            "Width": meta.variable_display_width, 
            "Measure": meta.variable_measure}
      # Convert metadata to DataFrame and transpose
      return DataFrame(data={k: meta[k] for k in meta.keys()}).T

# %% ../nbs/01_data.ipynb 7
def read_sav(file: str, # Path to SPSS file
            ) -> Tuple[DataFrame, DataFrame]: # Output df and meta as dataframes
      "Wrapper around `pyreadstat.read_sav()` with nicer metadata output."
      df, meta = pyreadstat.read_sav(file)
      meta = reformat_metadata(meta)
      return df, meta

# %% ../nbs/01_data.ipynb 9
def sav_to_parquet(df: DataFrame, #
                   meta: DataFrame, # 
                   filename: str, # Basename for saving files (ie. for G208_Q.sav, filename="G208_Q")
                   dir: str # Directory to save output
                   ) -> None:
      "Save data and metadata as parquet files."
      # Convert metadata to all string types so it behaves nicely when saving as a parquet file
      meta = meta.astype(str)
      df.to_parquet(Path(dir) / f"{filename}_df.parquet")
      meta.to_parquet(Path(dir) / f"{filename}_meta.parquet")

# %% ../nbs/01_data.ipynb 15
class Dataset:
    "A class which contains both the data and metadata for a given data file."
    def __init__(self,
                 df: DataFrame, # the actual raw data
                 meta: DataFrame): # the metadata, including variable labels, value labels, and types for each variable
        self.df, self.meta = df, meta
